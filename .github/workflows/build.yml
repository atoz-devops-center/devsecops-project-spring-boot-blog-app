---
name: DevSecOps Pipeline
on:
  push:
    branches:
      - main
    paths-ignore: 
      - 'version'
      - 'README.md'
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      
      - name: get new version
        id: version
        run: |
          current_version="$(cat version)"
          new_version="$(echo "$current_version" | awk -F. '{$3 = $3 + 1;} 1' OFS=".")"
          echo "$new_version" > version
          echo "VERSION=$new_version" >> "$GITHUB_OUTPUT"
      
      # - name: Build
      #   env:
      #       DATA_CREATOR_SECRET: ${{ secrets.DATA_CREATOR_SECRET }}
      #   run: mvn --batch-mode -DskipTests package

      # - name: Test
      #   env:
      #     DATA_CREATOR_SECRET: ${{ secrets.DATA_CREATOR_SECRET }}
      #   run: mvn --batch-mode -Dmaven.test.failure.ignore=true test     
                       
    outputs:
      VERSION: "${{ steps.version.outputs.VERSION }}"

  Dependency-Cheker:
    needs: [build]
    name: OWASP Dependency Cheker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     distribution: 'zulu'
      #     java-version: 17

      # - name: Dependency-Check Run
      #   env:
      #     # actions/setup-java changes JAVA_HOME so it needs to be reset to match the dependency-check docker image
      #     JAVA_HOME: /opt/jdk
      #   uses: dependency-check/Dependency-Check_Action@main
      #   id: dependency-check
      #   with:
      #     project: 'OWASP Security Shepherd'
      #     path: '.'
      #     format: 'HTML'
      #     args: >
      #       --format JSON
      #       --prettyPrint

      # - name: Publish Dependency-Check Results
      #   uses: actions/upload-artifact@master
      #   with:
      #      name: dependency_check_report
      #      path: ${{github.workspace}}/reports
  
  
  snyk-test:
    needs: [build, Dependency-Cheker]
    name: Snyk to check for Vulnerabilities
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Import Secrets
      #   id: import-secrets
      #   uses: hashicorp/vault-action@v2.5.0
      #   with:
      #     url: http://${{ secrets.VAULT_URL }}:8200/
      #     token: ${{ secrets.VAULT_TOKEN }}
      #     method: approle
      #     roleId: ${{ secrets.VAULT_ROLE_ID }}
      #     secretId: ${{ secrets.VAULT_SECRET }}
      #     secrets: |
      #       secrets/creds/snyk snyk_token | SNYK_TOKEN; 

      # - run: chmod +x mvnw

      # - name: Run Snyk to check for vulnerabilities
      #   uses: snyk/actions/maven@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #    command: monitor
      #   continue-on-error: true
  
  sonarqube-analysis:
    needs: [build, Dependency-Cheker, snyk-test ]
    name: Sonarqube Analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     distribution: 'zulu'
      #     java-version: 17
      
      # - name: Cache SonarCloud packages
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.sonar/cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
      # - name: Cache Maven packages
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.m2
      #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: ${{ runner.os }}-m2
      
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Import Secrets
      #   id: import-secrets
      #   uses: hashicorp/vault-action@v2
      #   with:
      #     url: http://${{ secrets.VAULT_URL }}:8200/
      #     token: ${{ secrets.VAULT_TOKEN }}
      #     method: approle
      #     roleId: ${{ secrets.VAULT_ROLE_ID }}
      #     secretId: ${{ secrets.VAULT_SECRET }}
      #     secrets: |
      #       secrets/creds/sonar sonar_token | SONAR_TOKEN;
      
      # - name: Build and analyze
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     DATA_CREATOR_SECRET: ${{ secrets.DATA_CREATOR_SECRET }}
      #   run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}

  docker-build:
    needs: [build, Dependency-Cheker, sonarqube-analysis, snyk-test ]
    name: Docker Build and Push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Import Secrets
      #   id: import-secrets
      #   uses: hashicorp/vault-action@v2
      #   with:
      #     url: http://${{ secrets.VAULT_URL }}:8200/
      #     token: ${{ secrets.VAULT_TOKEN }}
      #     method: approle
      #     roleId: ${{ secrets.VAULT_ROLE_ID }}
      #     secretId: ${{ secrets.VAULT_SECRET }}
      #     secrets: |
      #       secrets/creds/docker username | DOCKER_USERNAME;
      #       secrets/creds/docker password | DOCKER_PASSWORD;
      # - name: Maven Install
      #   env:
      #     DATA_CREATOR_SECRET: ${{ secrets.DATA_CREATOR_SECRET }}
      #   run: | 
      #     mvn clean compile package -Pdocker      
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            balimidi24/devsecops-project-spring-boot-blog-app:latest
            balimidi24/devsecops-project-spring-boot-blog-app:${{ needs.build.outputs.VERSION }}

  Trivy :
    needs: [build, Dependency-Cheker, sonarqube-analysis, snyk-test, docker-build]
    name: Trivy Vulnerability Scanner for Containers
    runs-on: ubuntu-latest
    steps:
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'balimidi24/devsecops-project-spring-boot-blog-app:${{ needs.build.outputs.VERSION }}'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'MEDIUM,CRITICAL,HIGH,LOW'
          output: 'trivy-results.html'

      - name: Upload Trivy Report to S3  
        run: |
          mv trivy-results.html trivy-results-${{ needs.build.outputs.VERSION }}.html
          aws s3 cp trivy-results-${{ needs.build.outputs.VERSION }}.html s3://devsecops-project-spring-boot-blog-app/trivy/ 

  version-update:
    needs: [build, Dependency-Cheker, sonarqube-analysis, snyk-test, docker-build, Trivy]
    name: Push Version into Repository
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3
      
      - name: Getting Version from previous Jobs
        run:  echo ${{ needs.build.outputs.VERSION }} > version

      - uses: EndBug/add-and-commit@v7.0.0
        with:
          add: version
          message: "version updated with tag ${{ needs.build.outputs.VERSION }}"
          author_name: ${{ secrets.NAME }}
          author_email: ${{ secrets.EMAIL }}