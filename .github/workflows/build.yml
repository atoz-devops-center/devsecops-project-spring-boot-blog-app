---
name: DevSecOps Pipeline
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      
      - name: get new version
        id: version
        run: |
          current_version="$(cat version)"
          new_version="$(echo "$current_version" | awk -F. '{$3 = $3 + 1;} 1' OFS=".")"
          echo "$new_version" > version
          echo "VERSION=$new_version" >> "$GITHUB_OUTPUT"
      
      - name: Build
        env:
            DATA_CREATOR_SECRET: ${{ secrets.DATA_CREATOR_SECRET }}
        run: mvn --batch-mode -DskipTests package

      - name: Test
        env:
          DATA_CREATOR_SECRET: ${{ secrets.DATA_CREATOR_SECRET }}
        run: mvn --batch-mode -Dmaven.test.failure.ignore=true test                    
    outputs:
      VERSION: "${{ steps.version.outputs.VERSION }}"

  Dependency-Cheker:
    needs: [build]
    name: OWASP Dependency Cheker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Dependency-Check Run
        env:
          # actions/setup-java changes JAVA_HOME so it needs to be reset to match the dependency-check docker image
          JAVA_HOME: /opt/jdk
        uses: dependency-check/Dependency-Check_Action@main
        id: dependency-check
        with:
          project: 'OWASP Security Shepherd'
          path: '.'
          format: 'HTML'
          args: >
            --format JSON
            --prettyPrint

      - name: Publish Dependency-Check Results
        uses: actions/upload-artifact@master
        with:
           name: dependency_check_report
           path: ${{github.workspace}}/reports
  
  vault-secrets:
    needs: [build, Dependency-Checker]
    name: Get Vault Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: http://${{ secrets.SONAR_URL }}:8200/
          token: ${{ secrets.VAULT_TOKEN }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLEID }}
          secretId: ${{ secrets.VAULT_SECRETID}}
          secrets: |
            secrets/creds/sonar sonar-token | SONAR_TOKEN;
            secrets/creds/docker username | DOCKER_USERNAME;
            secrets/creds/docker password | DOCKER_PASSWORD;
            secrets/creds/snyk snyk_token | SNYK_TOKEN
    outputs:
      SONAR_TOKEN: "${{ steps.import-secrets.outputs.SONAR_TOKEN }}"
      DOCKER_USERNAME: "${{ steps.import-secrets.outputs.DOCKER_USERNAME }}"
      DOCKER_PASSWORD: "${{ steps.import-secrets.outputs.DOCKER_PASSWORD }}"
      SNYK_TOKEN: "${{ steps.import-secrets.outputs.SNYK_TOKEN }}"

  sonarqube-analysis:
    needs: [build, Dependency-Cheker, snyk-opensource-monitor, vault-secrets ]
    name: Sonarqube Analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ needs.vault-secrets.outputs.SONAR_TOKEN }}
          DATA_CREATOR_SECRET: ${{ secrets.DATA_CREATOR_SECRET }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
  
  snyk-opensource-security:
    needs: [build, Dependency-Cheker, vault-secrets]
    name: Snyk Open Source Security
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - run: chmod +x mvnw
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ needs.vault-secrets.outputs.SNYK_TOKEN }}
        continue-on-error: true

  snyk-code-security:
    needs: [snyk-opensource-security, vault-secrets]
    name: Snyk Code Security
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: chmod +x mvnw
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ needs.vault-secrets.outputs.SNYK_TOKEN }}
        with:
         command: code test
        continue-on-error: true

  snyk-opensource-monitor:
    needs: [snyk-opensource-security, vault-secrets]
    name: Snyk Open Source Monitor
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: chmod +x mvnw
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ needs.vault-secrets.outputs.SNYK_TOKEN }}
        with:
         command: monitor
        continue-on-error: true
  
  docker-build:
    needs: [generate-version, sonarqube-analysis]
    name: Docker Build and Push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      
      - name: Maven Install
        run: mvn clean install 
      
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ needs.vault-secrets.outputs.DOCKER_USERNAME }}
          password: ${{ needs.vault-secrets.outputs.DOCKER_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            balimidi24/devsecops-project-spring-boot-blog-app:latest
            balimidi24/devsecops-project-spring-boot-blog-app:${{ needs.build.outputs.VERSION }}